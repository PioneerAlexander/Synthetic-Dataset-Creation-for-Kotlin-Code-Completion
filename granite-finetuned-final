{"task_id": "HumanEval_kotlin/32", "completion": "val lPrime = mutableListOf<Int>()\nfor (i in l.indices) {\nif (i % 3!= 0) {\nlPrime.add(l[i])\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/74", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/160", "completion": "val evenDigits = mutableListOf<Int>()\n\nfor (i in a..b) {\nif (i % 2 == 0) {\nevenDigits.add(i)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/88", "completion": "var count = 0\nvar index = 0\n\nwhile (index < s.length) {\n    if (s[index] == 'I') {\n        count++\n    }\n    index++\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/89", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/119", "completion": "var sum = 0\nfor (i in 0 until k) {\nval num = arr[i]\nif (num.toString().length <= 2) {\nsum += num\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/3", "completion": "var balance = 0\n\nfor (operation in operations) {\n    balance += operation\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/84", "completion": "val row = lst.filter { it.contains(x) }\n\nval coordinates = mutableListOf<Pair<Int, Int>>()\n\nfor (i in row.indices) {\n    val index = row[i].indexOf(x)\n    coordinates.add(Pair(i, index))\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/17", "completion": "val notes = musicString.split(\" \")\nval beats = mutableListOf<Int>()\n\nfor (note in notes) {\n    when (note) {\n        \"o\" -> beats.add(4)\n        \"o|\" -> beats.add(2)\n        \".|\" -> beats.add(1)\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/57", "completion": "var sum = 0\nfor (i in 1..n) {\n    sum += i\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/87", "completion": "\nval sortedLst = lst.sorted()\n\nif (sortedLst.size < 2) {\n    return null\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/34", "completion": "var max = l[0]\nfor (i in 1 until l.size) {\nif (l[i] > max) {\nmax = l[i]\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/21", "completion": "\nval minValue = numbers.minOrNull()\nval maxValue = numbers.maxOrNull()\n\nval range = maxValue - minValue\n\nval scaledNumbers = numbers.map { (it - minValue) / range }\n\nreturn scaledNumbers\n}<br><br>\n\nfun main() {\nval numbers = listOf(1.0, 2.0, 3.0, 4.0, 5.0)\nval rescaledNumbers = rescaleToUnit(numbers)\nprintln(rescaledNumbers)\n}<br><br>\n\nmain()<br><br>\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/42", "completion": "val digits = mutableListOf<Int>()\nvar remainder = x\n\nwhile (remainder > 0) {\nval digit = remainder % base\ndigits.add(digit)\nremainder /= base\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/27", "completion": "val result = StringBuilder()\nfor (char in string) {\nif (char.isLowerCase()) {\nresult.append(char.toUpperCase())\n} else {\nresult.append(char.toLowerCase())\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/141", "completion": "\nval x_numerator = x.split(\"/\")[0].toInt()\nval x_denominator = x.split(\"/\")[1].toInt()\n\nval n_numerator = n.split(\"/\")[0].toInt()\nval n_denominator = n.split(\"/\")[1].toInt()\n\nval product = x_numerator * n_numerator\n\nval result = product % x_denominator == 0 && product % n_denominator == 0\n\nreturn result\n}<br><br>\n\nfun main() {\nval x = \"1/5\"\nval n = \"5/1\"\n\nval result = simplify(x, n)\n\nprintln(result)\n}<br><br>\n\nval x = \"1/6\"\nval n = \"2/1\"\n\nval result = simplify(x, n)\n\nprintln(result)\n}<br><br>\n\nval x = \"7/10\"\nval n = \"10/2\"\n\nval result = simplify(x, n)\n\nprintln(result)\n}<br><br>\n\nval x = \"", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/98", "completion": "\nval words = s.split(\" \")\n\nreturn words\n}<br><br>\n\nfun main() {\nval words = wordsString(\"Hi, my name is John\")\nprintln(words)\n}<br><br>\n\nwords_string(\"Hi, my name is John\")<br>\n}<br><br>\n\nwords_string(\"One, two, three, four, five, six\")<br>\n}<br><br>\n\nwords_string(\"This, is, a, test\")<br>\n}<br><br>\n\nwords_string(\"This, is, a, test, with, commas\")<br>\n}<br><br>\n\nwords_string(\"This, is, a, test, with, commas, and, spaces\")<br>\n}<br><br>\n\nwords_string(\"This, is, a, test, with, commas, and, spaces, and, punctuation\")<br>\n}<br><br>\n\nwords_string(\"This, is, a, test, with, commas, and, spaces, and, punctuation, and, numbers\")<br>", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/75", "completion": "var count = 0\nfor (digit in num) {\n    if (digit in '0'..'9') {\n        val decimal = digit.toString().toInt()\n        if (decimal % 2 == 0 || decimal % 3 == 0 || decimal % 5 == 0 || decimal % 7 == 0 || decimal % 11 == 0 || decimal % 13 == 0) {\n            count++\n        }\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/92", "completion": "val keys = dict.keys.toList()\n\nif (keys.isEmpty()) {\nreturn false\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/4", "completion": "val mean = numbers.sum() / numbers.size\n\nval absoluteDeviations = numbers.map { abs(it - mean) }\n\nval sumOfAbsoluteDeviations = absoluteDeviations.sum()\n\nval meanAbsoluteDeviation = sumOfAbsoluteDeviations / absoluteDeviations.size\n\nreturn meanAbsoluteDeviation\n}<br>\n\nfun main() {\nval numbers = listOf(1.0, 2.0, 3.0, 4.0)\nval result = meanAbsoluteDeviation(numbers)\nprintln(result)\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/62", "completion": "val digits = x.toString().toCharArray()\nval shiftedDigits = digits.subList(shift, digits.size).toTypedArray()\nshiftedDigits.addAll(digits.subList(0, shift))\nreturn shiftedDigits.joinToString(\"\")\n}<br>\n\nfun main() {\nprintln(circularShift(12, 1))\nprintln(circularShift(12, 2))\n}<br>\n\ncircular_shift(12, 1)\n}<br>\n\ncircular_shift(12, 2)\n}<br>\n\ncircular_shift(12, 3)\n}<br>\n\ncircular_shift(12, 4)\n}<br>\n\ncircular_shift(12, 5)\n}<br>\n\ncircular_shift(12, 6)\n}<br>\n\ncircular_shift(12, 7)\n}<br>\n\ncircular_shift(12, 8)\n}<br>\n\ncircular_shift(12, 9)\n}<br>\n\ncircular_shift(12, ", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/43", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/128", "completion": "var product = 1\nvar num = n\nwhile (num > 0) {\n    if (num % 2!= 0) {\n        product *= num % 10\n    }\n    num /= 10\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/129", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/46", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/93", "completion": "val primeNumbers = mutableListOf<Int>()\n\nfor (i in 2..n) {\nvar isPrime = true\n\nfor (j in 2..i) {\nif (i % j == 0) {\nisPrime = false\nbreak\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/90", "completion": "val vowels = listOf('a', 'e', 'i', 'o', 'u')\n\nval encodedMessage = message.map {\nif (it.isLowerCase()) {\nif (it in vowels) {\nval index = vowels.indexOf(it)\nval nextVowel = vowels[index + 2]\n\nit.toUpperCase() + nextVowel.toLowerCase()\n} else {\nit.toUpperCase()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/150", "completion": "\nval strongestExtension = extensions.maxByOrNull { it.length }\n\nreturn \"$className.$strongestExtension\"\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/40", "completion": "val result = mutableListOf<Int>()\nfor (i in l.indices) {\nresult.add(l[i] + 1)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/51", "completion": "\nval s0Set = s0.toSet()\nval s1Set = s1.toSet()\n\nreturn s0Set == s1Set\n}<br>\n\nfun main() {\nval s0 = \"eabcdzzzz\"\nval s1 = \"dddzzzzzzzddeddabc\"\n\nval result = sameChars(s0, s1)\nprintln(result)\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/99", "completion": "\nval evenNumbers = mutableListOf<Int>()\n\nfor (i in x..y) {\n    if (i % 2 == 0) {\n        evenNumbers.add(i)\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/65", "completion": "val evenValues = arr.filter { it % 2 == 0 }\nval smallestEvenValue = evenValues.minOrNull()\nval smallestEvenValueIndex = evenValues.indexOf(smallestEvenValue)\n\nreturn listOf(smallestEvenValue, smallestEvenValueIndex)\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/158", "completion": "\nval result = mutableListOf<Char>()\n\nfor (char in s) {\n    if (char.isLetter()) {\n        result.add(char.toUpperCase())\n    } else {\n        result.add(char.toLowerCase())\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/106", "completion": "\n}<caret>\n\nfun main() {\n    println(moveOneBall(listOf(3, 4, 5, 1, 2)))\n    println(moveOneBall(listOf(3, 5, 4, 1, 2)))\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/58", "completion": "\nval stack = mutableListOf<Char>()\n\nfor (char in brackets) {\n    if (char == '(') {\n        stack.add(char)\n    } else if (char == ')') {\n        if (stack.isEmpty()) {\n            return false\n        } else {\n            stack.removeAt(stack.size - 1)\n        }\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/67", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/154", "completion": "\nval is_right_angle = a * a + b * b == c * c\n\nreturn is_right_angle\n}<caret>\n\nval is_right_angle = a * a + b * b == c * c\n\nreturn is_right_angle\n}<caret>\n\nval is_right_angle = a * a + b * b == c * c\n\nreturn is_right_angle\n}<caret>\n\nval is_right_angle = a * a + b * b == c * c\n\nreturn is_right_angle\n}<caret>\n\nval is_right_angle = a * a + b * b == c * c\n\nreturn is_right_angle\n}<caret>\n\nval is_right_angle = a * a + b * b == c * c\n\nreturn is_right_angle\n}<caret>\n\nval is_right_angle = a * a + b * b == c * c\n\nreturn is_right_angle\n}<caret>\n\nval is_right_angle = a * a + b * b == c * c\n\nreturn is_right", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/113", "completion": "\nval ones = arr.map { it.count { it == 1 } }\n\nval sorted_ones = ones.sorted()\n\nval sorted_arr = arr.sortedBy { sorted_ones.indexOf(ones[it]) }\n\nreturn sorted_arr\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/124", "completion": "val start1 = interval1[0]\nval end1 = interval1[1]\n\nval start2 = interval2[0]\nval end2 = interval2[1]\n\nval intersectionStart = max(start1, start2)\nval intersectionEnd = min(end1, end2)\n\nif (intersectionStart > intersectionEnd) {\nreturn \"NO\"\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/71", "completion": "\nval totalChars1 = lst1.sumOf { it.length }\nval totalChars2 = lst2.sumOf { it.length }\n\nif (totalChars1 < totalChars2) {\n    return lst1\n} else if (totalChars1 > totalChars2) {\n    return lst2\n} else {\n    return lst1\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/0", "completion": "\nval sortedNumbers = numbers.sorted()\n\nfor (i in 0 until sortedNumbers.size - 1) {\nval currentElement = sortedNumbers[i]\nval nextElement = sortedNumbers[i + 1]\n\nif (Math.abs(currentElement - nextElement) < threshold) {\nreturn true\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/100", "completion": "val avg = (n + m) / 2.0\nval rounded = Math.round(avg)\n\nif (n > m) {\n    return \"-1\"\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/70", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/81", "completion": "var sum = 0\nvar binary = \"\"\n\nwhile (n > 0) {\n    val remainder = n % 2\n    sum += remainder\n    binary = remainder.toString() + binary\n    n /= 2\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/78", "completion": "val letterGrades = mutableListOf<String>()\n\nfor (gpa in grades) {\n    if (gpa >= 4.0) {\n        letterGrades.add(\"A+\")\n    } else if (gpa >= 3.7) {\n        letterGrades.add(\"A\")\n    } else if (gpa >= 3.3) {\n        letterGrades.add(\"A-\")\n    } else if (gpa >= 3.0) {\n        letterGrades.add(\"B+\")\n    } else if (gpa >= 2.7) {\n        letterGrades.add(\"B\")\n    } else if (gpa >= 2.3) {\n        letterGrades.add(\"B-\")\n    } else if (gpa >= 2.0) {\n        letterGrades.add(\"C+\")\n    } else if (gpa >= 1.7) {\n        letterGrades.add(\"C\")\n    } else if (gpa >= 1.3) {\n        letterGrades.add(\"C-\")\n    } else if (gpa >= 1.0) {\n        letterGrades.add(\"D+\")\n    } else if", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/54", "completion": "\nval firstElement = l[0]\n\nfor (i in 1 until l.size) {\n    if (l[i] < firstElement) {\n        return false\n    }\n    if (l[i] > firstElement) {\n        return true\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/94", "completion": "val aUnit = a % 10\nval bUnit = b % 10\n\nreturn aUnit * bUnit\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/79", "completion": "val length = string.length\n\nfor (i in 2..length) {\nif (length % i == 0) {\nreturn false\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/140", "completion": "val words = sentence.split(\" \")\nval result = mutableListOf<String>()\n\nfor (word in words) {\nif (word.length > 1) {\nif (isPrime(word.length)) {\nresult.add(word)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/127", "completion": "val triList = mutableListOf<Int>()\n\nfor (i in 0 until n + 1) {\n    if (i == 0) {\n        triList.add(1)\n    } else if (i == 1) {\n        triList.add(3)\n    } else if (i % 2 == 0) {\n        triList.add(i / 2)\n    } else {\n        val previous = triList[i - 1]\n        val current = triList[i - 2]\n        val next = triList[i + 1]\n        val result = previous + current + next\n        triList.add(result)\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/133", "completion": "\nval negativeNumbers = lst.filter { it < 0 }\nval positiveNumbers = lst.filter { it > 0 }\n\nif (negativeNumbers.isEmpty() && positiveNumbers.isEmpty()) {\n    return listOf(null, null)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/18", "completion": "var count = 0\nvar index = string.indexOf(substring)\n\nwhile (index!= -1) {\n    count++\n    index = string.indexOf(substring, index + substring.length)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/159", "completion": "\nval messageDigest = MessageDigest.getInstance(\"MD5\")\nval hash = messageDigest.digest(text.toByteArray())\n\nval sb = StringBuilder()\nfor (b in hash) {\nval hex = String.format(\"%02x\", b)\nsb.append(hex)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/118", "completion": "\nval oddElements = lst.filter { it % 2!= 0 }\n\nval evenPositions = oddElements.indices.filter { it % 2 == 0 }\n\nval sumOfOddElements = oddElements.sum()\n\nval sumOfOddElementsInEvenPositions = evenPositions.map { oddElements[it] }.sum()\n\nreturn sumOfOddElementsInEvenPositions\n}<br><br>\n\nval lst = listOf(5, 8, 7, 1)\n\nval result = solution(lst)\n\nprintln(result)\n}<br><br>\n\nval lst = listOf(3, 3, 3, 3, 3)\n\nval result = solution(lst)\n\nprintln(result)\n}<br><br>\n\nval lst = listOf(30, 13, 24, 321)\n\nval result = solution(lst)\n\nprintln(result)\n}<br><br>\n\nval lst = listOf(5, 8, 7, 1)\n\nval result = solution(lst)\n\nprintln(result)\n}<", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/33", "completion": "val uniqueElements = mutableListOf<Int>()\n\nfor (element in l) {\nif (element!in uniqueElements) {\nuniqueElements.add(element)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/153", "completion": "\nval romanNumerals = mapOf(\n    1 to \"I\",\n    5 to \"V\",\n    10 to \"X\",\n    50 to \"L\",\n    100 to \"C\",\n    500 to \"D\",\n    1000 to \"M\"\n)\n\nval romanNumeral = StringBuilder()\n\nvar num = number\n\nwhile (num > 0) {\n    val (key, value) = romanNumerals.entries.first { it.key <= num }\n    romanNumeral.append(value)\n    num -= key\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/123", "completion": "\nval sortedList = lst.sorted()\n\nfor (i in 0 until lst.size - 1) {\n    if (lst[i] == lst[i + 1]) {\n        return false\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/20", "completion": "\nval minDistance = Double.POSITIVE_INFINITY\nvar closestPair: Pair<Double, Double>? = null\n\nfor (i in 0 until numbers.size - 1) {\n    for (j in i + 1 until numbers.size) {\n        val distance = Math.abs(numbers[i] - numbers[j])\n        if (distance < minDistance) {\n            minDistance = distance\n            closestPair = Pair(numbers[i], numbers[j])\n        }\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/53", "completion": "\nval stack = mutableListOf<Char>()\n\nfor (char in brackets) {\n    if (char == '<') {\n        stack.add(char)\n    } else if (char == '>') {\n        if (stack.isEmpty()) {\n            return false\n        } else {\n            stack.removeAt(stack.size - 1)\n        }\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/130", "completion": "\nval roundedList = lst.map { Math.ceil(it) }\n\nval squaredList = roundedList.map { it * it }\n\nval sum = squaredList.sum()\n\nreturn sum\n}<caret>\n\nfun main() {\n    val lst = listOf(1.4, 4.2, 0)\n    println(sumSquares(lst))\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/39", "completion": "var count = 0\nfor (i in 1..n) {\nfor (j in 1..n) {\nif (i + j > n) {\ncount++\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/13", "completion": "\nval a = a.toLong()\nval b = b.toLong()\n\nvar temp = a\n\nwhile (temp % b!= 0) {\ntemp = b\nb = a % b\na = temp\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/104", "completion": "\nval evenPalindromes = mutableListOf<Int>()\nval oddPalindromes = mutableListOf<Int>()\n\nfor (i in 1..n) {\nval num = i.toString()\nval reversedNum = num.reversed()\n\nif (num == reversedNum) {\nif (num.toInt() % 2 == 0) {\nevenPalindromes.add(num.toInt())\n} else {\noddPalindromes.add(num.toInt())\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/56", "completion": "var num = n\nvar largestPrime = 0\n\nwhile (num > 1) {\n    var i = 2\n    while (i * i <= num) {\n        if (num % i == 0) {\n            num /= i\n            largestPrime = i\n            break\n        }\n        i++\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/1", "completion": "\nval parenGroups = mutableListOf<String>()\n\nvar currentGroup = \"\"\nvar isNested = false\n\nfor (char in parenString) {\n    if (char == '(') {\n        if (isNested) {\n            currentGroup += char\n        } else {\n            currentGroup = char\n            parenGroups.add(currentGroup)\n        }\n    } else if (char == ')') {\n        if (isNested) {\n            currentGroup += char\n        } else {\n            isNested = true\n        }\n    } else {\n        currentGroup += char\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/66", "completion": "var maxFreq = 0\nvar maxNum = 0\n\nfor (num in lst) {\n    var count = 0\n    for (i in lst) {\n        if (i == num) {\n            count++\n        }\n    }\n    if (count >= num) {\n        if (count > maxFreq) {\n            maxFreq = count\n            maxNum = num\n        }\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/151", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/122", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/5", "completion": "\n}<caret>\n\nval numbers = listOf(1, 2, 3)\nval delimeter = 4\n\nval result = intersperse(numbers, delimeter)\n\nprintln(result)\n}<caret>\n\nval numbers = listOf(1, 2, 3)\nval delimeter = 4\n\nval result = intersperse(numbers, delimeter)\n\nprintln(result)\n}<caret>\n\nval numbers = listOf(1, 2, 3)\nval delimeter = 4\n\nval result = intersperse(numbers, delimeter)\n\nprintln(result)\n}<caret>\n\nval numbers = listOf(1, 2, 3)\nval delimeter = 4\n\nval result = intersperse(numbers, delimeter)\n\nprintln(result)\n}<caret>\n\nval numbers = listOf(1, 2, 3)\nval delimeter = 4\n\nval result = intersperse(numbers, delimeter)\n\nprintln(result)\n}<caret>\n\nval numbers = listOf(1, 2, 3)\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/142", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/48", "completion": "val vowels = setOf('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n\nval result = StringBuilder()\n\nfor (char in text) {\nif (char!in vowels) {\nresult.append(char)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/155", "completion": "\nval maxUniqueChars = words.maxBy { it.toSet().size }\n\nreturn maxUniqueChars\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/125", "completion": "\nval magnitudes = arr.map { abs(it) }\nval signs = arr.map { if (it > 0) 1 else if (it < 0) -1 else 0 }\n\nval sumMagnitudes = magnitudes.sum()\nval productSigns = signs.reduce { acc, sign -> acc * sign }\n\nreturn sumMagnitudes * productSigns\n}<br><br>\n\nfun main() {\n    val arr = listOf(1, 2, 2, -4)\n    val result = prodSigns(arr)\n    println(result)\n}<br><br>\n\nmain()<br><br>\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br>\n\n}<br><br", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/149", "completion": "val result = mutableListOf<Int>()\nfor (i in game.indices) {\n    val diff = abs(game[i] - guess[i])\n    result.add(if (game[i] == guess[i]) 0 else diff)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/139", "completion": "var sum = 0\nfor (i in lst.indices) {\n    if (i % 3 == 0) {\n        sum += lst[i] * lst[i]\n    } else if (i % 4 == 0 && i % 3!= 0) {\n        sum += lst[i] * lst[i] * lst[i]\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/131", "completion": "val lastChar = txt.last()\nval isLetter = lastChar.isLetter()\nval isNotWord =!txt.contains(\" \")\n\nreturn isLetter && isNotWord\n}<br>\n\nfun main() {\n    println(checkIfLastCharIsALetter(\"apple pie\"))\n    println(checkIfLastCharIsALetter(\"apple pi e\"))\n    println(checkIfLastCharIsALetter(\"apple pi e \"))\n    println(checkIfLastCharIsALetter(\"\"))\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/156", "completion": "\nval totalEaten = number + need\n\nval remainingCarrots = if (remaining >= totalEaten) {\n    remaining - totalEaten\n} else {\n    remaining\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/41", "completion": "\nval set = mutableSetOf<Int>()\n\nfor (num in l) {\n    if (set.contains(-num)) {\n        return true\n    }\n    set.add(num)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/110", "completion": "\nval result = mutableListOf<String>()\n\nfor (string in lst) {\nval count = string.count { it.isDigit() && it.toInt() % 2!= 0 }\nval message = \"the number of odd elements $count in the string $string of the input.\"\nresult.add(message)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/28", "completion": "\nval result = mutableListOf<String>()\n\nfor (string in strings) {\n    result.add(string)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/114", "completion": "val words = s.split(\" \")\nval consonants = \"bcdfghjklmnpqrstvwxyz\"\nval result = mutableListOf<String>()\n\nfor (word in words) {\n    var count = 0\n    for (char in word) {\n        if (char in consonants) {\n            count++\n        }\n    }\n    if (count == n) {\n        result.add(word)\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/45", "completion": "val sortedList = l.sorted()\nval length = sortedList.size\n\nif (length % 2 == 0) {\nval index1 = length / 2 - 1\nval index2 = length / 2\nval value1 = sortedList[index1]\nval value2 = sortedList[index2]\n\nreturn (value1 + value2) / 2.0\n} else {\nval index = (length - 1) / 2\nval value = sortedList[index]\n\nreturn value.toDouble()\n}<br>\n}<br>\n\nfun main() {\nval list1 = listOf(3, 1, 2, 4, 5)\nval list2 = listOf(-10, 4, 6, 1000, 10, 20)\n\nprintln(median(list1))\nprintln(median(list2))\n}<br>\n}<br>\n\nfun main() {\nval list1 = listOf(3, 1, 2, 4, 5)\nval list2 = listOf(-10, 4, 6", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/116", "completion": "\nval firstString = lst[0]\nval secondString = lst[1]\n\nval firstStringLength = firstString.length\nval secondStringLength = secondString.length\n\nif (firstStringLength % 2!= 0 || secondStringLength % 2!= 0) {\nreturn \"No\"\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/147", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/117", "completion": "\nval maxList = mutableListOf<Int>()\n\nfor (i in 0 until arr.size) {\n    if (maxList.size < k) {\n        maxList.add(arr[i])\n    } else {\n        if (arr[i] > maxList[0]) {\n            maxList.removeAt(0)\n            maxList.add(arr[i])\n        }\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/109", "completion": "\nval result = s.filter { it!in c }\n\nval isPalindrome = result.reversed() == result\n\nreturn Pair(result, isPalindrome)\n}<br>\n\nval s = \"abcde\"\nval c = \"ae\"\n\nval result = reverseDelete(s, c)\n\nprintln(result)\n}<br>\n\nval s = \"abcdef\"\nval c = \"b\"\n\nval result = reverseDelete(s, c)\n\nprintln(result)\n}<br>\n\nval s = \"abcdedcba\"\nval c = \"ab\"\n\nval result = reverseDelete(s, c)\n\nprintln(result)\n}<br>\n\nval s = \"abcde\"\nval c = \"ae\"\n\nval result = reverseDelete(s, c)\n\nprintln(result)\n}<br>\n\nval s = \"abcdef\"\nval c = \"b\"\n\nval result = reverseDelete(s, c)\n\nprintln(result)\n}<br>\n\nval s = \"abcdedcba\"\nval c = \"ab\"\n\nval", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/112", "completion": "var count = 0\nfor (row in grid) {\n    for (well in row) {\n        if (well == 1) {\n            count++\n        }\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/55", "completion": "val commonElements = mutableListOf<Int>()\n\nfor (element in l1) {\n    if (element in l2) {\n        commonElements.add(element)\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/36", "completion": "val lPrime = mutableListOf<Int>()\n\nfor (i in l.indices) {\n    if (i % 2 == 0) {\n        lPrime.add(l[i])\n    } else {\n        lPrime.add(l[i].sorted())\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/68", "completion": "val sum = a + b + c\n\nif (sum < a || sum < b || sum < c) {\nreturn -1\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/60", "completion": "val fibfib = mutableListOf<Int>()\n\nfor (i in 0 until n) {\nif (i == 0) {\nfibfib.add(0)\n} else if (i == 1) {\nfibfib.add(0)\n} else if (i == 2) {\nfibfib.add(1)\n} else {\nval previousFib = fibfib[i - 1]\nval previous2Fib = fibfib[i - 2]\nval previous3Fib = fibfib[i - 3]\n\nval currentFib = previousFib + previous2Fib + previous3Fib\n\nfibfib.add(currentFib)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/101", "completion": "val result = mutableListOf<Int>()\n\nfor (num in x) {\n    val numStr = num.toString()\n    if (numStr.all { it.isDigit() && it.toInt() % 2 == 1 }) {\n        result.add(num)\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/19", "completion": "\nval numberals = numbers.split(\" \")\n\nval sortedNumbers = numberals.sorted()\n\nreturn sortedNumbers.joinToString(\" \")\n}<br>\n\nval numbers = \"three one five\"\n\nval sortedNumbers = sortNumbers(numbers)\n\nprintln(sortedNumbers)\n}<br>\n\nval numbers = \"three one five\"\n\nval sortedNumbers = sortNumbers(numbers)\n\nprintln(sortedNumbers)\n}<br>\n\nval numbers = \"three one five\"\n\nval sortedNumbers = sortNumbers(numbers)\n\nprintln(sortedNumbers)\n}<br>\n\nval numbers = \"three one five\"\n\nval sortedNumbers = sortNumbers(numbers)\n\nprintln(sortedNumbers)\n}<br>\n\nval numbers = \"three one five\"\n\nval sortedNumbers = sortNumbers(numbers)\n\nprintln(sortedNumbers)\n}<br>\n\nval numbers = \"three one five\"\n\nval sortedNumbers = sortNumbers(numbers)\n\nprintln(sortedNumbers)\n}<br>\n\nval numbers = \"three one five\"\n\nval sortedNumbers = sortNumbers(numbers)\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/97", "completion": "val stones = mutableListOf<Int>()\n\nfor (i in 0 until n) {\nif (i % 2 == 0) {\nstones.add(2 * i + 1)\n} else {\nstones.add(2 * i)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/126", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/134", "completion": "\nval a_type = a.javaClass.simpleName\nval b_type = b.javaClass.simpleName\n\nif (a_type == \"Int\" && b_type == \"Int\") {\n    return if (a > b) a else b\n} else if (a_type == \"Float\" && b_type == \"Float\") {\n    return if (a > b) a else b\n} else if (a_type == \"String\" && b_type == \"String\") {\n    return if (a > b) a else b\n} else {\n    return null\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/136", "completion": "var result = 1\nfor (i in 1..n) {\n    result *= i\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/7", "completion": "val filteredStrings = mutableListOf<String>()\n\nfor (string in strings) {\n    if (substring in string) {\n        filteredStrings.add(string)\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/47", "completion": "var result = 1\nfor (i in 0 until n) {\n    result = (result * 2) % p\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/8", "completion": "val sum = numbers.sum()\nval product = numbers.fold(1) { acc, num -> acc * num }\n\nreturn listOf(sum, product)\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/25", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/69", "completion": "TODO(\"Not implemented yet\")\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/52", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/6", "completion": "\nval nestedParens = parenString.split(\" \")\n\nval nestedLevel = mutableListOf<Int>()\n\nfor (paren in nestedParens) {\n    var level = 0\n    for (char in paren) {\n        if (char == '(') {\n            level++\n        } else if (char == ')') {\n            level--\n        }\n    }\n    nestedLevel.add(level)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/73", "completion": "val power = Math.pow(n.toDouble(), x.toDouble())\nreturn power == x\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/83", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/22", "completion": "val filteredValues = mutableListOf<Any>()\n\nfor (value in values) {\n    if (value is Int) {\n        filteredValues.add(value)\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/26", "completion": "val uniqueNumbers = mutableListOf<Int>()\n\nfor (number in numbers) {\n    if (number!in uniqueNumbers) {\n        uniqueNumbers.add(number)\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/105", "completion": "var count = 0\nfor (num in arr) {\n    if (num.toString().sumOf { it.toInt() } > 0) {\n        count++\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/35", "completion": "var count = 0\nfor (i in 1..n) {\n    if (i % 11 == 0 || i % 13 == 0) {\n        if (i.toString().contains(\"7\")) {\n            count++\n        }\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/30", "completion": "val positiveNumbers = mutableListOf<Int>()\nfor (num in l) {\n    if (num > 0) {\n        positiveNumbers.add(num)\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/80", "completion": "var count = 0\nfor (i in 1..9) {\nfor (j in 1..9) {\nfor (k in 1..9) {\nfor (l in 1..9) {\nif (i.toString() + j.toString() + k.toString() + l.toString().length == n) {\ncount++\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/11", "completion": "val result = \"\"\nfor (i in a.indices) {\nval a_bit = a[i]\nval b_bit = b[i]\nval xor_bit = if (a_bit == '1' && b_bit == '1') '0' else '1'\nresult += xor_bit\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/2", "completion": "val integerPart = number.toInt()\nval decimalPart = number - integerPart\n\nreturn decimalPart\n}<br>\n\nfun main() {\nval number = 3.5\nval result = truncateNumber(number)\nprintln(result)\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/138", "completion": "val digits = fileName.filter { it.isDigit() }\nval dotIndex = fileName.indexOf('.')\nval beforeDot = fileName.substring(0, dotIndex)\nval afterDot = fileName.substring(dotIndex + 1)\n\nif (digits.size > 3 || afterDot!in listOf(\"txt\", \"exe\", \"dll\")) {\n    return \"No\"\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/37", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/24", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/145", "completion": "val planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n\nif (planet1!in planets || planet2!in planets) {\n    return emptyList()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/120", "completion": "\nval collatzSequence = mutableListOf<Int>()\n\nvar currentNumber = n\n\nwhile (currentNumber!= 1) {\n    if (currentNumber % 2 == 0) {\n        currentNumber /= 2\n    } else {\n        currentNumber = 3 * currentNumber + 1\n    }\n    collatzSequence.add(currentNumber)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/76", "completion": "val binary = StringBuilder()\n\nwhile (decimal > 0) {\nval remainder = decimal % 2\n\nif (remainder == 1) {\nbinary.append('1')\n} else {\nbinary.append('0')\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/15", "completion": "val numbers = mutableListOf<Int>()\nfor (i in 0..n) {\nnumbers.add(i)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/107", "completion": "\nval lst1Even = lst1.filter { it % 2 == 0 }\nval lst2Even = lst2.filter { it % 2 == 0 }\n\nif (lst1Even.size == lst2.size) {\n    return \"YES\"\n} else {\n    return \"NO\"\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/16", "completion": "val uniqueChars = mutableSetOf<Char>()\n\nfor (char in string) {\n    if (char.isLowerCase()) {\n        uniqueChars.add(char.toUpperCase())\n    } else {\n        uniqueChars.add(char)\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/61", "completion": "var count = 0\nfor (char in s) {\n    if (char in \"aeiou\") {\n        count++\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/115", "completion": "\nval vowels = listOf('a', 'e', 'i', 'o', 'u')\n\nvar closestVowel = \"\"\n\nfor (i in word.length - 1 downTo 0) {\n    if (word[i] in vowels) {\n        if (closestVowel == \"\") {\n            closestVowel = word[i]\n        } else {\n            if (word[i]!= closestVowel) {\n                return \"\"\n            }\n        }\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/111", "completion": "\nval n = nums.size\n\nvar minSum = Int.MAX_VALUE\n\nfor (i in 0 until n) {\nvar sum = 0\n\nfor (j in i until n) {\nsum += nums[j]\n\nif (sum < minSum) {\nminSum = sum\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/82", "completion": "var sum = 0\nfor (i in 1 until lst.size step 2) {\n    if (lst[i] % 2 == 0) {\n        sum += lst[i]\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/49", "completion": "\nfor (num in l) {\n    if (num > t) {\n        return false\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/29", "completion": "val filteredStrings = mutableListOf<String>()\n\nfor (string in strings) {\n    if (string.startsWith(prefix)) {\n        filteredStrings.add(string)\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/144", "completion": "val a = IntArray(n)\nfor (i in 0 until n) {\n    a[i] = i * i - i + 1\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/86", "completion": "val encrypted = mutableListOf<Char>()\n\nfor (char in s) {\n    val index = char.code - 'a'.code\n    val shiftedIndex = (index + 2 * 2) % 26\n    val shiftedChar = (shiftedIndex + 'a'.code).toChar()\n    encrypted.add(shiftedChar)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/23", "completion": "\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/135", "completion": "\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret>\n\n}<caret", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/72", "completion": "\n}<caret>\n\nfun main() {\n    println(isMultiplyPrime(30))\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/59", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/10", "completion": "val palindrome = string.substring(string.length - 1, string.length)\n\nval prefix = string.substring(0, string.length - palindrome.length)\n\nval reversedPrefix = prefix.reversed()\n\nreturn string + reversedPrefix\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/103", "completion": "val result = mutableListOf<Int>()\nfor (i in 1..n) {\nif (i % 2 == 0) {\nresult.add(i.factorial())\n} else {\nresult.add(1..i).sum()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/108", "completion": "\nval letterCount = HashMap<String, Int>()\n\nfor (letter in text.lowercase()) {\n    if (letterCount.containsKey(letter)) {\n        letterCount[letter] = letterCount[letter]!! + 1\n    } else {\n        letterCount[letter] = 1\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/146", "completion": "\nval sortedList = lst.sortedBy { it.length }\n\nval result = mutableListOf<String>()\n\nfor (word in sortedList) {\n    if (word.length % 2 == 0) {\n        result.add(word)\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/38", "completion": "\nval set = HashSet<Int>()\n\nfor (i in l) {\n    if (set.contains(i)) {\n        set.remove(i)\n    } else {\n        set.add(i)\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/143", "completion": "var count = 0\nfor (num in nums) {\n    if (num > 10 && num % 2!= 0 && num % 10!= 0 && num % 10!= 9) {\n        count++\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/132", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/12", "completion": "var longestString: String? = null\nvar longestLength: Int = 0\n\nfor (string in strings) {\n    if (string.length > longestLength) {\n        longestString = string\n        longestLength = string.length\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/31", "completion": "\nif (n <= 1) {\n    return false\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/102", "completion": "val sortedArray = arr.sorted()\nval reversedArray = sortedArray.reversed()\n\nval result = mutableListOf<String>()\n\nfor (num in reversedArray) {\n    if (num in 1..9) {\n        result.add(num.toString())\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/64", "completion": "\nval fruits = s.split(\" and \")\n\nval apples = fruits[0].split(\" apples\")[0].toInt()\nval oranges = fruits[1].split(\" oranges\")[0].toInt()\n\nval mangoFruits = totalFruits - apples - oranges\n\nreturn mangoFruits\n}<br>\n\nfun main() {\nval s = \"5 apples and 6 oranges\"\nval totalFruits = 19\n\nval result = fruitDistribution(s, totalFruits)\nprintln(result)\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br>\n\n}<br", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/157", "completion": "val result = operand[0]\nfor (i in 1 until operand.size) {\nval currentOperator = operator[i - 1]\nval currentOperand = operand[i]\n\nif (currentOperator == \"+\") {\nresult += currentOperand\n} else if (currentOperator == \"-\") {\nresult -= currentOperand\n} else if (currentOperator == \"*\") {\nresult *= currentOperand\n} else if (currentOperator == \"//\") {\nresult /= currentOperand\n} else if (currentOperator == \"**\") {\nresult = Math.pow(result, currentOperand)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/96", "completion": "val num = value.toDouble()\nval rounded = Math.round(num)\n\nif (num - rounded == 0.5) {\nif (rounded > 0) {\nreturn rounded + 1\n} else {\nreturn rounded - 1\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/44", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/63", "completion": "var sum = 0\nfor (char in s) {\n    if (char.isUpperCase()) {\n        sum += char.code\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/14", "completion": "val prefixes = mutableListOf<String>()\n\nfor (i in 0 until string.length) {\n    val prefix = string.substring(0, i + 1)\n    prefixes.add(prefix)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/95", "completion": "var count = 0\nfor (i in 0 until s.length step 2) {\nif (s[i].isUpperCase()) {\ncount++\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/9", "completion": "\nval result = mutableListOf<Int>()\n\nfor (i in numbers.indices) {\n    var maxElement = numbers[i]\n    for (j in i + 1 until numbers.size) {\n        if (numbers[j] > maxElement) {\n            maxElement = numbers[j]\n        }\n    }\n    result.add(maxElement)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/152", "completion": "\nval evenDigits = num.toString().filter { it.isDigit() }.filter { it.toInt() % 2 == 0 }.count()\nval oddDigits = num.toString().filter { it.isDigit() }.filter { it.toInt() % 2!= 0 }.count()\n\nreturn listOf(evenDigits, oddDigits)\n}<caret>\n\nval result = evenOddCount(-12)\nprintln(result)\n}<caret>\n\nval result = evenOddCount(123)\nprintln(result)\n}<caret>\n\nval result = evenOddCount(12345)\nprintln(result)\n}<caret>\n\nval result = evenOddCount(123456789)\nprintln(result)\n}<caret>\n\nval result = evenOddCount(1234567890)\nprintln(result)\n}<caret>\n\nval result = evenOddCount(12345678901)\nprintln(result)\n}<caret>\n\nval result = evenOddCount(1234567", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/50", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/85", "completion": "val firstIndexValue = array[0]\nval lastIndexValue = array[array.size - 1]\n\nval sum = firstIndexValue + lastIndexValue\n\nif (sum % 2 == 0) {\n    return array.sortedDescending()\n} else {\n    return array.sorted()\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/91", "completion": "\nval primeNumbers = mutableListOf<Int>()\n\nfor (num in lst) {\n    if (num > 1) {\n        for (i in 2..num) {\n            if (num % i == 0) {\n                break\n            }\n        }\n        if (num % i!= 0) {\n            primeNumbers.add(num)\n        }\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/148", "completion": "var sum = 0\nfor (num in lst) {\n    if (num is Int && num > 0) {\n        if (num % 2!= 0) {\n            sum += num * num\n        }\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/121", "completion": "\nval date_split = date.split(\"-\")\n\nif (date_split.size!= 3) {\n    return false\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/137", "completion": "\nval result = text.replace(\" \", \"_\")\n\nvar count = 0\nvar newString = \"\"\n\nfor (char in result) {\n    if (char =='') {\n        count++\n    } else {\n        if (count > 1) {\n            newString += \"-\"\n        }\n        newString += char\n        count = 0\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/77", "completion": "\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n}<caret>\n", "language": "kotlin"}
